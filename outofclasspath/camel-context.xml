<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xsi:schemaLocation="http://www.springframework.org/schema/beans https://www.springframework.org/schema/beans/spring-beans-3.0.xsd
       http://camel.apache.org/schema/spring https://camel.apache.org/schema/spring/camel-spring.xsd">


    <import resource="camel-context2.xml"/>

    <camelContext id="primaryCamelContext" xmlns="http://camel.apache.org/schema/spring" trace="false">

        <errorHandler id="parseErr" type="DeadLetterChannel" deadLetterUri="activemq:queue:DNO.ERROR"/>
        <errorHandler id="timingErr" deadLetterUri="activemq:queue:DNO.ERROR" type="DeadLetterChannel">
            <redeliveryPolicy backOffMultiplier="2" maximumRedeliveries="2" redeliveryDelay="1000"
                              retryAttemptedLogLevel="WARN" useExponentialBackOff="true"/>
        </errorHandler>

        <routeContextRef ref="DNO_CONTEXT"/>

        <route id="dno">
            <from uri="jms:queue:DNO_1"/>
            <log message="test: ${header.JmsTimestamp}"/>
            <choice>
                <when>
                    <method ref="analizeBean" method="isDigit"/>
                    <to uri="{{app.queue.consume}}"/>
                </when>
                <otherwise>
                    <process ref="firstProcessor2"/>
                    <to uri="{{app.queue.produce}}"/>
                </otherwise>
            </choice>

        </route>

        <route id="process-route" errorHandlerRef="timingErr">
            <from uri="{{app.queue.consume}}"/>
            <log message="&lt;&lt;Processing Message - Content: ${body}"/>
            <bean ref="someHandler"/>
            <!--            <process ref="firstProcessor2"/>-->
            <log message="Header after processing: ${header.BODY}"/>
            <log message="Body after processing: ${body}"/>
            <to uri="{{app.queue.produce}}"/>
        </route>

        <route id="produce-route">
            <from uri="{{app.queue.produce}}"/>
            <choice>
                <when>
                    <simple>${header.WAIT} == 'Y'</simple>
                    <multicast>
                        <to uri="activemq:queue:DNO.CR"/>
                        <to uri="activemq:queue:DNO.ER"/>
                    </multicast>
                </when>
                <otherwise>
                    <setHeader name="Destination">
                        <constant>activemq:queue:DNO.THREE</constant>
                    </setHeader>
                    <log message="log -- header dest: ${header.Destination}"/>
                    <recipientList>
                        <simple>${header.Destination}</simple>
                    </recipientList>
                </otherwise>
            </choice>

        </route>

        <route id="receiver">
            <from uri="activemq:queue:DNO.FR"/>
            <log message="receiver4 from app2 *** : ${body}"/>
        </route>

        <!--        <route id="receiver2">-->
        <!--            <from uri="activemq:queue:DNO.ER"/>-->
        <!--            <log message="receiver2: ${body}"/>-->
        <!--&lt;!&ndash;            <to uri="{{app.queue.consume}}"/>&ndash;&gt;-->
        <!--        </route>-->
        <!--        <route id="receiver3">-->
        <!--            <from uri="activemq:queue:DNO.THREE"/>-->
        <!--            <log message="receiver2: ${body}"/>-->
        <!--            &lt;!&ndash;            <to uri="{{app.queue.consume}}"/>&ndash;&gt;-->
        <!--        </route>-->
    </camelContext>

    <bean class="com.example.first_camel_case.processor.FirstProcessor" id="firstProcessor2"/>

    <bean class="com.example.first_camel_case.processor.SomeHandler" id="someHandler"/>

    <bean class="com.example.first_camel_case.processor.AnalizeBean" id="analizeBean"/>

</beans>
